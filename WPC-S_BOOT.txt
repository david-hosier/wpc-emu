# Johnny Mnemonic Bootup

- Dump created using WPC-EMU Tracer
- Comments based on https://gist.github.com/74hc595/fda8b274179fea633f5333d52513e1f7

## DUMP

CC=50 A=0000 B=0000 X=0000 Y=0000 S=0000 U=0000 8D9A: CLR   $3FF3    ;WPC_RAM_BANK
CC=54 A=0000 B=0000 X=0000 Y=0000 S=0000 U=0000 8D9D: LDA   #$00
CC=54 A=0000 B=0000 X=0000 Y=0000 S=0000 U=0000 8D9F: STA   $3FF2    ;WPC_LEDS: diagnostic LED off
CC=54 A=0000 B=0000 X=0000 Y=0000 S=0000 U=0000 8DA2: LDY   #$0006
CC=50 A=0000 B=0000 X=0000 Y=0006 S=0000 U=0000 8DA6: CLRB
CC=54 A=0000 B=0000 X=0000 Y=0006 S=0000 U=0000 8DA7: LDX   $FFEC    ;read 2-byte checksum "correction" from ROM
CC=58 A=0000 B=0000 X=E802 Y=0006 S=0000 U=0000 8DAA: CMPX  #$00FF   ;if it's 0x00FF, skip ROM/RAM checks
CC=58 A=0000 B=0000 X=E802 Y=0006 S=0000 U=0000 8DAD: LBEQ  $8EC0
CC=58 A=0000 B=0000 X=E802 Y=0006 S=0000 U=0000 8DB1: LDU   #$003F
CC=50 A=0000 B=0000 X=E802 Y=0006 S=0000 U=003F 8DB4: LDD   #$0000
CC=54 A=0000 B=0000 X=E802 Y=0006 S=0000 U=003F 8DB7: EXG   D,U      ;U=0x0000, D=0x003F.

; Compute checksum of all ROM banks and verify
L1:
CC=54 A=0000 B=003F X=E802 Y=0006 S=0000 U=0000 8DB9: TFR   B,A      ;bank loop start
CC=54 A=003F B=003F X=E802 Y=0006 S=0000 U=0000 8DBB: COMA
CC=59 A=00C0 B=003F X=E802 Y=0006 S=0000 U=0000 8DBC: BITA  #$07
CC=55 A=00C0 B=003F X=E802 Y=0006 S=0000 U=0000 8DBE: BNE   $8DCA
CC=55 A=00C0 B=003F X=E802 Y=0006 S=0000 U=0000 8DC0: COMA
CC=51 A=003F B=003F X=E802 Y=0006 S=0000 U=0000 8DC1: DECA
CC=51 A=003E B=003F X=E802 Y=0006 S=0000 U=0000 8DC2: STA   $3FFC    ;store A to bank switch register (WPC_ROM_BANK)
CC=51 A=003E B=003F X=E802 Y=0006 S=0000 U=0000 8DC5: CMPA  $4000    ;compare A with lowest byte in bank (0x20, 0x21, ...)
CC=54 A=003E B=003F X=E802 Y=0006 S=0000 U=0000 8DC8: BNE   $8E14    ;stop if comparison fails
CC=54 A=003E B=003F X=E802 Y=0006 S=0000 U=0000 8DCA: STB   $3FFC    ;store B to bank switch register (WPC_ROM_BANK)
CC=50 A=003E B=003F X=E802 Y=0006 S=0000 U=0000 8DCD: EXG   D,U      ;bring checksum back to D
CC=50 A=0000 B=0000 X=E802 Y=0006 S=0000 U=3E3F 8DCF: LDY   #$0100
CC=50 A=0000 B=0000 X=E802 Y=0100 S=0000 U=3E3F 8DD3: STA   $3FDD    ;sound board reset (WPC_SOUND_CONTROL_STATUS)
CC=54 A=0000 B=0000 X=E802 Y=0100 S=0000 U=3E3F 8DD6: LEAY  -$1,Y
CC=50 A=0000 B=0000 X=E802 Y=00FF S=0000 U=3E3F 8DD8: BNE   $8DD3

   (loops for 763 instructions)

CC=54 A=0000 B=0000 X=E802 Y=0000 S=0000 U=3E3F 8DDA: LDY   #$0006
CC=50 A=0000 B=0000 X=E802 Y=0006 S=0000 U=3E3F 8DDE: LDX   #$4000   ;initialize X pointer to start of bank
L2:
CC=50 A=0000 B=0000 X=4000 Y=0006 S=0000 U=3E3F 8DE1: ADDB  ,X       ;Add 8 bytes to checksum in D
CC=50 A=0000 B=0002 X=4000 Y=0006 S=0000 U=3E3F 8DE3: ADCA  #$00
CC=54 A=0000 B=0002 X=4000 Y=0006 S=0000 U=3E3F 8DE5: ADDB  $1,X
CC=58 A=0000 B=00A8 X=4000 Y=0006 S=0000 U=3E3F 8DE7: ADCA  #$00
CC=54 A=0000 B=00A8 X=4000 Y=0006 S=0000 U=3E3F 8DE9: ADDB  $2,X
CC=78 A=0000 B=00F1 X=4000 Y=0006 S=0000 U=3E3F 8DEB: ADCA  #$00
CC=54 A=0000 B=00F1 X=4000 Y=0006 S=0000 U=3E3F 8DED: ADDB  $3,X
CC=53 A=0000 B=0076 X=4000 Y=0006 S=0000 U=3E3F 8DEF: ADCA  #$00
CC=50 A=0001 B=0076 X=4000 Y=0006 S=0000 U=3E3F 8DF1: ADDB  $4,X
CC=5A A=0001 B=00B6 X=4000 Y=0006 S=0000 U=3E3F 8DF3: ADCA  #$00
CC=50 A=0001 B=00B6 X=4000 Y=0006 S=0000 U=3E3F 8DF5: ADDB  $5,X
CC=58 A=0001 B=00DC X=4000 Y=0006 S=0000 U=3E3F 8DF7: ADCA  #$00
CC=50 A=0001 B=00DC X=4000 Y=0006 S=0000 U=3E3F 8DF9: ADDB  $6,X
CC=78 A=0001 B=00EA X=4000 Y=0006 S=0000 U=3E3F 8DFB: ADCA  #$00
CC=50 A=0001 B=00EA X=4000 Y=0006 S=0000 U=3E3F 8DFD: ADDB  $7,X
CC=79 A=0001 B=0090 X=4000 Y=0006 S=0000 U=3E3F 8DFF: ADCA  #$00
CC=50 A=0002 B=0090 X=4000 Y=0006 S=0000 U=3E3F 8E01: EXG   Y,D
CC=50 A=0000 B=0006 X=4000 Y=0290 S=0000 U=3E3F 8E03: STB   $3FFF     ;pet the watchdog, WPC_ZEROCROSS_IRQ_CLEAR
CC=50 A=0000 B=0006 X=4000 Y=0290 S=0000 U=3E3F 8E06: EXG   Y,D
CC=50 A=0002 B=0090 X=4000 Y=0006 S=0000 U=3E3F 8E08: LEAX  $8,X      ;advance X 8 bytes
CC=50 A=0002 B=0090 X=4008 Y=0006 S=0000 U=3E3F 8E0A: CMPX  #$8000    ;are we at the end of the bank?
CC=5B A=0002 B=0090 X=4008 Y=0006 S=0000 U=3E3F 8E0D: BCS   $8DE1     ;if not, check more bytes

   (loops for 45013 instructions)

CC=54 A=00F5 B=009E X=8000 Y=0006 S=0000 U=3E3F 8E0F: EXG   D,U       ;bring checksum to D
CC=54 A=003E B=003F X=8000 Y=0006 S=0000 U=F59E 8E11: DECB            ;next bank
CC=50 A=003E B=003E X=8000 Y=0006 S=0000 U=F59E 8E12: BRA   $8DB9

CC=59 A=001E B=001F X=8000 Y=0006 S=0000 U=FD12 8E14: EXG   D,U       ;bring checksum to D
CC=59 A=00FD B=0012 X=8000 Y=0006 S=0000 U=1E1F 8E16: SUBD  $FFEE     ;compare with stored value at 0xFFEE-0xFFEF
CC=54 A=0000 B=0000 X=8000 Y=0006 S=0000 U=1E1F 8E19: BEQ   $8E1D
CC=54 A=0000 B=0000 X=8000 Y=0006 S=0000 U=1E1F 8E1D: TFR   D,Y       ;low byte of Y is now 0x01 if ROM test failed

; Verify working RAM (leaves adjustments/audits alone)
; Writes 0x55 to 0x0000-0x172F, then verifies,
; then writes 0xAA to 0x0000-0x172F and verifies again

CC=54 A=0000 B=0000 X=8000 Y=0000 S=0000 U=1E1F 8E1F: LDB   #$06
CC=50 A=0000 B=0006 X=8000 Y=0000 S=0000 U=1E1F 8E21: LDA   #$B4
CC=58 A=00B4 B=0006 X=8000 Y=0000 S=0000 U=1E1F 8E23: STA   $3FFD     ;unlock protected memory with magic value 0xB4 (WPC_RAM_LOCK)
CC=58 A=00B4 B=0006 X=8000 Y=0000 S=0000 U=1E1F 8E26: LDA   #$01
CC=50 A=0001 B=0006 X=8000 Y=0000 S=0000 U=1E1F 8E28: STA   $3FFE     ;something something memory protection (WPC_RAM_LOCKSIZE)
CC=50 A=0001 B=0006 X=8000 Y=0000 S=0000 U=1E1F 8E2B: STA   $3FFD     ;write WPC_RAM_LOCK
CC=50 A=0001 B=0006 X=8000 Y=0000 S=0000 U=1E1F 8E2E: LDA   #$55      ;initialize A with 0x55

CC=50 A=0055 B=0006 X=8000 Y=0000 S=0000 U=1E1F 8E30: LDX   #$0000    ;initialize X pointer to start of RAM
L3:
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E33: STA   ,X        ;store 0x55 in 4 bytes
CC=50 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E35: STA   $1,X
CC=50 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E37: STA   $2,X
CC=50 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E39: STA   $3,X
CC=50 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E3B: STB   $3FFF     ;pet watchdog WPC_ZEROCROSS_IRQ_CLEAR
CC=50 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E3E: LEAX  $4,X      ;advance X by 4 bytes
CC=50 A=0055 B=0006 X=0004 Y=0000 S=0000 U=1E1F 8E40: CMPX  #$16A0    ;stop at 0x16A0 (start of persistent values?)
CC=59 A=0055 B=0006 X=0004 Y=0000 S=0000 U=1E1F 8E43: BCS   $8E33

CC=54 A=0055 B=0006 X=16A0 Y=0000 S=0000 U=1E1F 8E45: LDX   #$0000    ;reset X to start of RAM
L4:
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E48: CMPA  ,X        ;compare 4 bytes with 0x55
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E4A: BNE   $8E6D     ;if any mismatch, bail
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E4C: CMPA  $1,X
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E4E: BNE   $8E6D
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E50: CMPA  $2,X
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E52: BNE   $8E6D
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E54: CMPA  $3,X
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E56: BNE   $8E6D
CC=54 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E58: STB   $3FFF
CC=50 A=0055 B=0006 X=0000 Y=0000 S=0000 U=1E1F 8E5B: LEAX  $4,X
CC=50 A=0055 B=0006 X=0004 Y=0000 S=0000 U=1E1F 8E5D: CMPX  #$16A0
CC=59 A=0055 B=0006 X=0004 Y=0000 S=0000 U=1E1F 8E60: BCS   $8E48
